from paho.mqtt import client as mqtt_client

import sys

import random as rnd

import re

from rich import print

sys.path.insert(0, "../")

import config  # Module with network device configurations.

broker = config.MQTT_BROKER_ADRESS # Broker address.
port = config.MQTT_PORT # Broker Port.
topic_base = config.SIMULATOR_TOPIC_BASE



def node_processing(node, memory):
    """ Função de tratamento do nó """
    if node.text == None: # There is no text to speech
        print("[b white on red blink] FATAL ERROR [/]: [b yellow reverse] There is no text to speech [/] in the element [b white]<talk>[/]. Please, check your code.✋⛔️")
        exit(1)

    texto = node.text
    # Replace variables throughout the text. variables must exist in memory
    if "#" in texto:
        # Checks if the robot's memory (vars) is empty
        if memory.vars == {}:
            print("[b white on red blink] FATAL ERROR [/]: [b yellow reverse] No variables have been defined [/] to be used in the[b white] <talk>[/]. Please, check your code.✋⛔️")
            exit(1)

        var_list = re.findall(r'\#[a-zA-Z]+[0-9]*', texto) # Generate list of occurrences of vars (#...)
        for v in var_list:
            if v[1:] in memory.vars:
                texto = texto.replace(v, str(memory.vars[v[1:]]))
            else:
                # If the variable does not exist in the robot's memory, it displays an error message
                print("[b white on red blink] FATAL ERROR [/]: The variable [b white]" + v[1:] + "[/] [b yellow reverse] has not been declared [/] to be used in the [b white]<talk>[/]. Please, check your code.✋⛔️")
                exit(1)

    # This part replaces the $, or the $-1 or the $1 in the text
    if "$" in texto: # Check if there is $ in the text
        # Checks if var_dollar has any value in the robot's memory
        if (len(memory.var_dolar)) == 0:
            print("[b white on red blink] FATAL ERROR [/]: There are [b yellow reverse] no values [/] for the [b white]$[/] used in the [b white]<talk>[/]. Please, check your code.✋⛔️")
            exit(1)
        else: # Find the patterns $ $n or $-n in the string and replace with the corresponding values
            dollars_list = re.findall(r'\$[-0-9]*', texto) # Find dollar patterns and return a list of occurrences
            dollars_list = sorted(dollars_list, key=len, reverse=True) # Sort the list in descending order of length (of the element)
            for var_dollar in dollars_list:
                if len(var_dollar) == 1: # Is the dollar ($)
                    texto = texto.replace(var_dollar, memory.var_dolar[-1][0])
                else: # May be of type $n or $-n
                    if "-" in var_dollar: # $-n type
                        indice = int(var_dollar[2:]) # Var dollar is of type $-n. then just take n and convert it to int.
                        try:
                            texto = texto.replace(var_dollar, memory.var_dolar[-(indice + 1)][0]) 
                        except IndexError:
                            print('[b white on red blink] FATAL ERROR [/]: There was an [b yellow reverse] index error [/] for the variable [b white]"' + var_dollar + '"[/]. Please, check your code.✋⛔️')
                            exit(1)
                    else: # tipo $n
                        indice = int(var_dollar[1:]) # Var dollar is of type $n. then just take n and convert it to int.
                        try:
                            texto = texto.replace(var_dollar, memory.var_dolar[(indice - 1)][0])
                        except IndexError:
                            print('[b white on red blink] FATAL ERROR [/]: There was an [b yellow reverse] index error [/] for the variable [b white]"' + var_dollar + '"[/]. Please, check your code.✋⛔️')
                            exit(1)
                        
        
    # This part implements the random text generated by using the / character
    texto = texto.split(sep="/") # Text becomes a list with the number of sentences divided by character. /
    ind_random = rnd.randint(0, len(texto)-1)
    print('[b white]State:[/] The Robot is [b blue]speaking[/] the sentence: [b white]"' + texto[ind_random] + '"[/].')




    # client = create_mqtt_client()
    # client.publish(topic_base + '/' + node.tag, message)

    return node # It returns the same node


def create_mqtt_client():
    client = mqtt_client.Client()
    try:
        client.connect(broker, port)
    except:
        print ("Unable to connect to Broker.")
        exit(1)
    
    return client